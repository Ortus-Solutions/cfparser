/*===TOKENS===*/
COMPONENT                <component>
'{'                      <{>
Hidden:NEWLINE                  <>
FUNCTION                 <function>
IDENTIFIER               <foo>
'('                      <(>
')'                      <)>
'{'                      <{>
Hidden:NEWLINE                  <>
VAR                      <var>
IDENTIFIER               <foo>
'='                      <=>
FUNCTION                 <function>
'('                      <(>
REQUIRED                 <required>
STRING                   <string>
IDENTIFIER               <baz>
')'                      <)>
'{'                      <{>
Hidden:NEWLINE                  <>
RETURN                   <return>
OPEN_STRING              <">
STRING_LITERAL           <bar!>
CLOSE_STRING             <">
';'                      <;>
Hidden:NEWLINE                  <>
'}'                      <}>
';'                      <;>
Hidden:NEWLINE                  <>
'}'                      <}>
Hidden:NEWLINE                  <>
'}'                      <}>
Hidden:NEWLINE                  <>
/*===TREE===*/
(scriptBlock
  (componentDeclaration
    component
    (componentGuts
      {
      (element
        (functionDeclaration
          function
          (identifier foo)
          (
          parameterList
          )
          (compoundStatement
            {
            (statement
              (localAssignmentExpression
                var
                (startExpression
                  (baseExpression (unaryExpression (memberExpression (identifier foo))))
                )
                =
                (startExpression
                  (baseExpression
                    (anonymousFunctionDeclaration
                      function
                      (
                      (parameterList
                        (parameter required (parameterType (typeSpec (type string))) (identifier baz))
                      )
                      )
                      (compoundStatement
                        {
                        (statement
                          (returnStatement
                            return
                            (anExpression
                              (startExpression
                                (baseExpression
                                  (unaryExpression
                                    (primaryExpression
                                      (literalExpression (stringLiteral " (stringLiteralPart bar!) "))
                                    )
                                  )
                                )
                              )
                            )
                          )
                          (endOfStatement ;)
                        )
                        }
                      )
                    )
                  )
                )
              )
              (endOfStatement ;)
            )
            }
          )
        )
      )
      }
    )
  )
)
/*======*/
/*===DECOMPILE===*/
component {
  public function foo()     {
      var foo =  function (required baz)   {
    return 'bar!';

  };

    }
}
/*======*/