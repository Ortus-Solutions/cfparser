/*===TOKENS===*/
IDENTIFIER               <foo>
'='                      <=>
'{'                      <{>
IDENTIFIER               <bar>
':'                      <:>
INTEGER_LITERAL          <1>
'}'                      <}>
';'                      <;>
Hidden:NEWLINE                  <>
'++'                     <++>
IDENTIFIER               <foo>
'.'                      <.>
IDENTIFIER               <bar>
';'                      <;>
Hidden:NEWLINE                  <>
IDENTIFIER               <foo>
'.'                      <.>
IDENTIFIER               <bar>
'++'                     <++>
';'                      <;>
Hidden:NEWLINE                  <>
/*===TREE===*/
(scriptBlock
  (element
    (statement
      (assignmentExpression
        (startExpression
          (baseExpression (unaryExpression (memberExpression (identifier foo))))
        )
        =
        (startExpression
          (baseExpression
            (unaryExpression
              (primaryExpression
                (implicitStruct
                  {
                  (implicitStructElements
                    (implicitStructExpression
                      (implicitStructKeyExpression (multipartIdentifier (identifier bar)))
                      :
                      (baseExpression (unaryExpression (primaryExpression (literalExpression 1))))
                    )
                  )
                  }
                )
              )
            )
          )
        )
      )
      (endOfStatement ;)
    )
  )
  (element
    (statement
      (startExpression
        (baseExpression
          (unaryExpression
            ++
            (unaryExpression (memberExpression (identifier foo) . (identifier bar)))
          )
        )
      )
      ;
    )
  )
  (element
    (statement
      (startExpression
        (baseExpression
          (unaryExpression
            (unaryExpression (memberExpression (identifier foo) . (identifier bar)))
            ++
          )
        )
      )
      ;
    )
  )
)
/*======*/
/*===DECOMPILE===*/
{
foo = {bar:1};
++foo.bar;
foo.bar++;

}
/*======*/